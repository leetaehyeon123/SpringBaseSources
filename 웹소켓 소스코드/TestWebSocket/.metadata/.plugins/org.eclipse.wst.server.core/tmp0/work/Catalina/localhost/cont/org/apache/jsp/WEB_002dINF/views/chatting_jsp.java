/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.56
 * Generated at: 2021-02-27 09:56:02 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class chatting_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("    ");

    String id=(String)session.getAttribute("id");
    String roomId=request.getParameter("roomId");
    
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("<div style=\"border: black 1px solid;width: 50%; height: 7vh;margin: 20px auto 0px auto; \">\r\n");
      out.write("<h1>id:");
      out.print(id );
      out.write("</h1>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<div id=\"chatDiv\" style=\"border: black 1px solid; border-bottom: 0px; border-top: 0px;width: 50%;  height: 70vh; margin: 0px auto 0px auto;  overflow: auto;\">\r\n");
      out.write("<!-- \r\n");
      out.write("여기서 컨트롤러에서 넘겨준 db데이터를 찍어주면 됨 \r\n");
      out.write(" -->\r\n");
      out.write("\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<div style=\"border: black 1px solid;border-top: 0px; width: 50%;height: 5vh; margin: 0px auto;text-align: center;\">\r\n");
      out.write("<input id=\"message\" type=\"text\" onkeydown=\"enterKey()\"><input id=\"sendBtn\" type=\"submit\" value=\"전송\">\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!--(제이쿼리 사용,웹소켓 사용 <script/>) -->\r\n");
      out.write("<script src=\"http://code.jquery.com/jquery-latest.min.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\"   src=\"https://cdnjs.cloudflare.com/ajax/libs/sockjs-client/1.1.5/sockjs.min.js\"></script>\r\n");
      out.write("\r\n");
      out.write("<!-- 스크립트부  -->\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("\r\n");
      out.write("//웹소켓 연결부\r\n");
      out.write("let sock = new SockJS(\"echo\");/* 웹소켓 객체생성 (생성자에 만들어둔 Echohandler클래스의 매핑 url을 작성)*/\r\n");
      out.write("sock.onmessage = onMessage;/*상대 또는 본인  메시지 전송 감지시 자동 실행 메서드*/\r\n");
      out.write("sock.onclose = onClose;/* 메시지 연결 끊고 싶을때 실행하는 메서드 */\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("$(\"#sendBtn\").click(function(){ /* 전송 버튼 눌렸을 시 */\r\n");
      out.write("   \t sendMessage();/* sendMessage메서드 호출 */\r\n");
      out.write("\t $('#message').val('')/* 메시지 입력상자 지우기 */\r\n");
      out.write(" });\r\n");
      out.write("\r\n");
      out.write("function sendMessage() {/* 소켓을 통한 Echohandler에게 메시지 전송 */\r\n");
      out.write("\t\r\n");
      out.write("\t/* sock.send()를 통해 EchoHandler에게 값을 전달할 때\r\n");
      out.write("\t 파라미터로 String 타입 하나를 받는다.\r\n");
      out.write("\t하지만 우린 입력한 사람의 id와 방번호를 같이 보내서 디비에 저장할거다.\r\n");
      out.write("\t그래서 필자는 json형태의 string으로 정보를 담아 보내기로 하였다 */\r\n");
      out.write("\tvar json={ \"message\" : $('#message').val() , \"id\" : '");
      out.print(id);
      out.write("' , \"roomId\" : '");
      out.print(roomId);
      out.write("'}; /* 우선 필요한 정보를 담은 json을 만들었고*/\r\n");
      out.write("    sock.send(JSON.stringify(json));/* 그 json을 String으로 변환 하여 보냈다. EchoHandler에서 받을때 json형태로 받아 값을 추출해서 디비에 저장할 것이다. */\r\n");
      out.write("    focusMe();\r\n");
      out.write(" }\r\n");
      out.write("function onMessage(msg){\r\n");
      out.write("\t\tvar json=JSON.parse(msg.data);//msg로 오는 데이터가 json형태의 문자열이 온다. 그문자열을  json 타입으로 바꾸어 roomId,id,message를 추출한다.\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t  if(json.roomId == '");
      out.print(roomId);
      out.write("'){ //이방이 맞다면\r\n");
      out.write("\t\t         if(json.id != '");
      out.print(id);
      out.write("'){//본인이 아니면 왼쪽 출력\r\n");
      out.write("\t\t         $(\"#chatDiv\").append(\"<p style='text-align:left'>\" +json.id+\" : \"+ json.message + \"</p>\");\r\n");
      out.write("\t\t         \r\n");
      out.write("\t\t         } else if(json.id == '");
      out.print(id );
      out.write("'){//본인이면 오른쪽 출력\r\n");
      out.write("\t\t            $(\"#chatDiv\").append(\"<p style='text-align:right'>\" + json.message + \"</p>\");   \r\n");
      out.write("\t\t         }\r\n");
      out.write("\t\t      }\r\n");
      out.write("\t      \r\n");
      out.write("\t\t  scrollDrop();\r\n");
      out.write("}\r\n");
      out.write("function onClose(evt) {\r\n");
      out.write("   \r\n");
      out.write(" }\r\n");
      out.write("\r\n");
      out.write("//편의기능 메서드 구현부\r\n");
      out.write("window.onload= windowLoaded();\r\n");
      out.write("function windowLoaded(){\r\n");
      out.write("   focusMe();\r\n");
      out.write("   scrollDrop();\r\n");
      out.write("}\r\n");
      out.write("function scrollDrop(){\r\n");
      out.write("   document.getElementById('chatDiv').scrollTop = document.getElementById('chatDiv').scrollHeight;\r\n");
      out.write("}\r\n");
      out.write("function focusMe(){\r\n");
      out.write("   document.getElementById('message').focus();\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function enterKey() {\r\n");
      out.write("    if (window.event.keyCode == 13) {\r\n");
      out.write("   \tsendMessage();\r\n");
      out.write("      $('#message').val('');\r\n");
      out.write("   \r\n");
      out.write("    }\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
